article.guide
  carousel.deck.container-fluid
    slide.row-fluid
      .col-sm-3
        h3 Northwind Graph
        p.lead From RDBMS to Graph, using a classic dataset
      .col-sm-9
        p
          em The Northwind Graph
          | &nbsp;is a mini graph application which demonstrates how to migrate from a 
          | relational database schema to graph constructs. 
        p This guide will show you how to:
        ol.big
          li Load: create data from external CSV files
          li Relate: transform foreign key references into data relationships
    slide.row-fluid
      .col-sm-3
        h3 Load
        p To the right is a series of data load statements which require public internet
          | access. 
          code LOAD CSV
          |  will retrieve a CSV file from a valid URL, applying a Cypher statement to
          | each row using a named map (here we're using the name `row`).
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish
        p.text-center.text-warning.bg-warning WARNING: This adds data to the current database, each time it is run!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create') LOAD CSV
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/categories.csv" AS row
            CREATE (n:Category)
            SET n = row, n.CategoryID = toInt(row.CategoryID)
            RETURN n
          figcaption Load product categories, converting the CategoryID to an Integer.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/customers.csv" AS row
            CREATE (n:Customer)
            SET n = row
            RETURN n
          figcaption Load customers, without any value conversions.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/employees.csv" AS row
            CREATE (n:Employee)
            SET n = row, 
                n.EmployeeID = toInt(row.EmployeeID), 
                n.ReportsTo = toInt(row.ReportsTo)
            RETURN n
          figcaption Load employees, converting EmployeeID and ReportsTo to Integer values.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/orders.csv" AS row
            CREATE (n:Order)
            SET n = row, 
                n.OrderID = toInt(row.OrderID),
                n.EmployeeID = toInt(row.EmployeeID)
            RETURN n LIMIT 100
          figcaption Load product orders, converting OrderID and EmployeeID to Integer values.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/products.csv" AS row
            CREATE (n:Product)
            SET n = row, 
              n.ProductID = toInt(row.ProductID),
              n.SupplierID = toInt(row.SupplierID),
              n.CategoryID = toInt(row.CategoryID),
              n.UnitPrice = toFloat(row.UnitPrice),
              n.UnitsInStock = toInt(row.UnitsInStock),
              n.UnitsOnOrder = toInt(row.UnitsOnOrder),
              n.ReorderLevel = toInt(row.ReorderLevel),
              n.Discontinued = (row.Discontinued &lt;&gt; "0")
            RETURN n
          figcaption Load product information, converting values. Notice the
            code &lt;&gt;
            |  test against the String "0" for setting Discontinued to 
            code true
            |  or
            code false
            | .
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/order-details.csv" AS row
            CREATE (n:OrderDetail)
            SET n = row,
                n.OrderID = toInt(row.OrderID),
                n.ProductID = toInt(row.ProductID),
                n.UnitPrice = toFloat(row.UnitPrice),
                n.Quantity = toInt(row.Quantity),
                n.Discount = toFloat(row.Discount)
            RETURN n LIMIT 100
          figcaption Load order details, which relates the items on an order to an ordered product.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/shippers.csv" AS row
            CREATE (n:Shipper)
            SET n = row, n.ShipperID = toInt(row.ShipperID)
            RETURN n
          figcaption Load shippers, businesses which can deliver an order.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/regions.csv" AS row
            CREATE (n:Region)
            SET n = row,
                n.RegionID = toInt(row.RegionID)
            RETURN n
          figcaption Load regions, which are broad areas divided into sales territories.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "https://raw.githubusercontent.com/neo4j-contrib/northwind-neo4j/master/data/suppliers.csv" AS row
            CREATE (n:Supplier)
            SET n = row,
                n.SupplierID = toInt(row.SupplierID)
            RETURN n
          figcaption Load product suppliers.

    slide.row-fluid
      .col-sm-3
        h5 The Movie Graph
        br
        h3 Query
        p Finding patterns within the graph.
        ol
          li Actors are people who acted in movies
          li Directors are people who directed a movie
          li What other relationships exist?
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='match') MATCH
      .col-sm-9
        p.lead List all Tom Hanks movies...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (tom:Person {name: "Tom Hanks"})-[:ACTED_IN]->(tomHanksMovies) RETURN tom,tomHanksMovies
        p.lead Who directed "Cloud Atlas"?
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (cloudAtlas {title: "Cloud Atlas"})<-[:DIRECTED]-(directors) RETURN directors.name
        p.lead Tom Hanks' co-actors...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (tom:Person {name:"Tom Hanks"})-[:ACTED_IN]->(m)<-[:ACTED_IN]-(coActors) RETURN coActors.name
        p.lead How people are related to "Cloud Atlas"...
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (people:Person)-[relatedTo]-(:Movie {title: "Cloud Atlas"}) RETURN people.name, Type(relatedTo), relatedTo

    slide.row-fluid
      .col-sm-3
        h5 The Movie Graph
        br
        h3 Solve
        p You've heard of the classic "Six Degrees of Kevin Bacon"?
          | That is simply a shortest path query called the "Bacon Path".
        ol
          li Variable length patterns
          li Built-in shortestPath() algorithm
        hr
        p
          small Neo4j Manual
            ul
              li
                a(href='http://neo4j.com/docs/{{neo4j.version | neo4jdoc }}/query-match.html#match-variable-length-relationships') variable length relationships
              li
                a(href='http://neo4j.com/docs/{{neo4j.version | neo4jdoc }}/query-match.html#match-shortest-path') shortestPath
      .col-sm-9
        p.lead Movies and actors up to 4 "hops" away from Kevin Bacon
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (bacon:Person {name:"Kevin Bacon"})-[*1..4]-(hollywood)
            RETURN DISTINCT hollywood
        p.lead Bacon path, the shortest path of any relationships to Meg Ryan
        figure
          pre.pre-scrollable.code.runnable.
            MATCH p=shortestPath(
              (bacon:Person {name:"Kevin Bacon"})-[*]-(meg:Person {name:"Meg Ryan"})
            )
            RETURN p
    slide.row-fluid
      .col-sm-3
        h5 The Movie Graph
        br
        h3 Clean up
        p When you're done experimenting, you can remove the movie data set.
        p Note:
        ol
          li Nodes can't be deleted if relationships exist
          li Delete both nodes and relationships together
        p.text-center.text-warning.bg-warning WARNING: This will remove all Person and Movie nodes!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='delete') DELETE
      .col-sm-9
        p.lead Delete all Movie and Person nodes, and their relationships
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (a:Person),(m:Movie) OPTIONAL MATCH (a)-[r1]-(), (m)-[r2]-() DELETE a,r1,m,r2
        p.lead Prove that the Movie Graph is gone
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (n) RETURN n
    slide.row-fluid.header
      .col-sm-4
        h4 The Movie Graph
        br
        h3 Next steps
      .col-sm-4
        h3 Review getting started
        ul.undecorated
          li
            a(play-topic='intro') Intro
            |  - a guided tour
          li
            a(play-topic='concepts') Concepts
            |  - GraphDB 101
          li
            a(play-topic='cypher') Cypher
            |  - query language
      .col-sm-4
        //- h3 Try more code
        //- ul.undecorated
        //-   li
        //-     a(play-topic='network-graph') Network Management
          //- li
          //-   a(play-topic='product-graph') Product Recommendations
