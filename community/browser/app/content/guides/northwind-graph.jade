article.guide
  carousel.deck.container-fluid
    slide.row-fluid
      .col-sm-3
        h3 Northwind Graph
        p.lead From RDBMS to Graph, using a classic dataset
      .col-sm-9
        p
          em The Northwind Graph
          | &nbsp; demonstrates how to migrate from a 
          | relational database to Neo4j. The transformation
          | is iterative and deliberate, emphasizing the conceptual shift from 
          | relational tables to the nodes and relationshipss of a graph.
        p This guide will show you how to:
        ol.big
          li Load: create data from external CSV files
          li Index: index nodes based on label
          li Relate: transform foreign key references into data relationships
          li Promote: transform join records into relationships
    slide.row-fluid
      .col-sm-3
        h3 Load Products and Categories
        p First, load records directly into Neo4j without 
          i  any
          |  transformation. Each record becomes a node, labeled according to the originating
          | table name. This will create an unconnected graph which is an exact replica of
          | the orignal relational tables. 
        h4 How-to
        p To the right is a series of data load statements which require public internet
          | access. 
          code LOAD CSV
          |  will retrieve a CSV file from a valid URL, applying a Cypher statement to
          | each row using a named map (here we're using the name `row`).
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish, then repeat with the next one
        p.text-center.text-warning.bg-warning WARNING: This adds data to the current database, each time it is run!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create') LOAD CSV
      .col-sm-9
        h4 Load Product Information
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/products.csv" AS row
            CREATE (n:Product)
            SET n = row, 
              n.ProductID = toInt(row.ProductID), n.SupplierID = toInt(row.SupplierID), n.CategoryID = toInt(row.CategoryID), n.UnitPrice = toFloat(row.UnitPrice),
              n.UnitsInStock = toInt(row.UnitsInStock), n.UnitsOnOrder = toInt(row.UnitsOnOrder), n.ReorderLevel = toInt(row.ReorderLevel), n.Discontinued = (row.Discontinued &lt;&gt; "0")
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/categories.csv" AS row
            CREATE (n:Category)
            SET n = row, n.CategoryID = toInt(row.CategoryID)
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
            CREATE (n:Supplier)
            SET n = row,
                n.SupplierID = toInt(row.SupplierID)
        h4 Create Indexes
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Product(productID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Category(categoryID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Supplier(supplierID)
        h4 Relate records
          pre.pre-scrollable.code.runnable.
            MATCH (p:Product),(c:Category)
            WHERE p.CategoryID = c.CategoryID
            CREATE (p)-[:PART_OF]-&gt;(c)
          
    slide.row-fluid
      .col-sm-3
        h3 Load Records
        p First, load records directly into Neo4j without 
          i  any
          |  transformation. Each record becomes a node, labeled according to the originating
          | table name. This will create an unconnected graph which is an exact replica of
          | the orignal relational tables. 
        h4 How-to
        p To the right is a series of data load statements which require public internet
          | access. 
          code LOAD CSV
          |  will retrieve a CSV file from a valid URL, applying a Cypher statement to
          | each row using a named map (here we're using the name `row`).
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish, then repeat with the next one
        p.text-center.text-warning.bg-warning WARNING: This adds data to the current database, each time it is run!
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create') LOAD CSV
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM http://data.neo4j.com/northwind/categories.csv" AS row
            CREATE (n:Category)
            SET n = row, n.CategoryID = toInt(row.CategoryID)
          figcaption Load product categories, converting the CategoryID to an Integer.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/customers.csv" AS row
            CREATE (n:Customer)
            SET n = row
          figcaption Load customers, without any value conversions.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/employees.csv" AS row
            CREATE (n:Employee)
            SET n = row, 
                n.EmployeeID = toInt(row.EmployeeID), 
                n.ReportsTo = toInt(row.ReportsTo)
          figcaption Load employees, converting EmployeeID and ReportsTo to Integer values.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/orders.csv" AS row
            CREATE (n:Order)
            SET n = row, 
                n.OrderID = toInt(row.OrderID),
                n.EmployeeID = toInt(row.EmployeeID)
          figcaption Load product orders, converting OrderID and EmployeeID to Integer values.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/products.csv" AS row
            CREATE (n:Product)
            SET n = row, 
              n.ProductID = toInt(row.ProductID),
              n.SupplierID = toInt(row.SupplierID),
              n.CategoryID = toInt(row.CategoryID),
              n.UnitPrice = toFloat(row.UnitPrice),
              n.UnitsInStock = toInt(row.UnitsInStock),
              n.UnitsOnOrder = toInt(row.UnitsOnOrder),
              n.ReorderLevel = toInt(row.ReorderLevel),
              n.Discontinued = (row.Discontinued &lt;&gt; "0")
          figcaption Load product information, converting values. Notice the
            code &lt;&gt;
            |  test against the String "0" for setting Discontinued to 
            code true
            |  or
            code false
            | .            
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
            CREATE (n:Supplier)
            SET n = row,
                n.SupplierID = toInt(row.SupplierID)
          figcaption Load product suppliers.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM http://data.neo4j.com/northwind/shippers.csv" AS row
            CREATE (n:Shipper)
            SET n = row, n.ShipperID = toInt(row.ShipperID)
          figcaption Load shippers, businesses which can deliver an order.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM http://data.neo4j.com/northwind/regions.csv" AS row
            CREATE (n:Region)
            SET n = row,
                n.RegionID = toInt(row.RegionID)
          figcaption Load regions, which are broad areas divided into sales territories.
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/territories.csv" AS row
            CREATE (n:Territory)
            SET n = row,
                n.TerritoryID = toInt(row.TerritoryID),
                n.RegionID = toInt(row.RegionID)
          figcaption Load the sales territories.
                    
                    
    slide.row-fluid
      .col-sm-3
        h3 Index the identifiers
        p Create indexes for any entities with unique identifiers. 
        h4 How-to
        p As with the previous step, run each of these queries one at a time.
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish, then repeat with the next one
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create index on') CREATE INDEX ON
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Product(productID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Category(categoryID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Employee(employeeID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Supplier(supplierID)
        figure
          pre.pre-scrollable.code.runnable.
            CREATE INDEX ON :Customer(customerID)
    slide.row-fluid
      .col-sm-3
        h3 Materialize relationships
        p Each foreign key reference. 
        h4 How-to
        p As with the previous step, run each of these queries one at a time.
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish, then repeat with the next one
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create index on') CREATE INDEX ON
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            MATCH (t:Territory),(r:Region)
            WHERE r.RegionID = t.RegionID 
            CREATE (t)-[:IS_IN]-&gt;(r)
          figcaption Match the cartesion product of Territories and Regions, materialize as `IS_IN` relationship.
        figure
          pre.pre-scrollable.code.runnable.
            RETURN 1
          figcaption Match the cartesion product of OrderDetails and Orders, materialize as `IS_IN` relationship.

    slide.row-fluid
      .col-sm-3
        h3 Replace join records
        p Replace join tables with relationships.
        h4 How-to
        p As with the previous step, run each of these queries one at a time.
        p Do this:
        ol
          li Click on each code block
          li Notice it gets copied to the editor above &uarr;
          li Click the editor's play button to execute
          li Wait for the query to finish, then repeat with the next one
        hr
        p
          small :help
          | &nbsp;
          a(help-topic='cypher') cypher
          | &nbsp;
          a(help-topic='create index on') CREATE INDEX ON
      .col-sm-9
        figure
          pre.pre-scrollable.code.runnable.
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/employee-territories.csv" AS row
            MATCH (e:Employee { EmployeeID: toInt(row.EmployeeID) })
            WITH e, row
            MATCH (t:Territory { TerritoryID: toInt(row.TerritoryID) })
            WITH e,t
            CREATE (e)-[:REPRESENTS]-&gt;(t)
          figcaption Replace the employee-territory join table with actual relationships.
        figure
          pre.pre-scrollable.code.runnable.
            TODO: MATCH OR LOAD CSV first?
            MATCH (od:OrderDetail),(o:Order),(p:Product)
            WHERE o.OrderID = od.OrderID 
              AND p.ProductID = od.ProductID
            CREATE (o)-[i:INCLUDES]-&gt;(p)
            SET i = od
            DELETE od
        figure
          pre.pre-scrollable.code.runnable.
            TODO: or, load from CSV directly into relationship
            LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/order-details.csv" AS row
            MATCH (o:Order), (p:Product)
            WHERE o.OrderID = toInt(row.OrderID)
              AND p.ProductID = toInt(row.ProductID)
            CREATE (o)-[r:INCLUDES]-&gt;(p)
            SET r = row,
                r.OrderID = toInt(row.OrderID),
                r.ProductID = toInt(row.ProductID),
                r.UnitPrice = toFloat(row.UnitPrice),
                r.Quantity = toInt(row.Quantity),
                r.Discount = toFloat(row.Discount)
          figcaption Load order details, which relates the items on an order to an ordered product.

    slide.row-fluid.header
      .col-sm-4
        h4 The Movie Graph
        br
        h3 Next steps
      .col-sm-4
        h3 Review getting started
        ul.undecorated
          li
            a(play-topic='intro') Intro
            |  - a guided tour
          li
            a(play-topic='concepts') Concepts
            |  - GraphDB 101
          li
            a(play-topic='cypher') Cypher
            |  - query language
      .col-sm-4
        h3 Try more code
        ul.undecorated
          li
            a(play-topic='network-graph') Network Management
          li
            a(play-topic='product-graph') Product Recommendations
